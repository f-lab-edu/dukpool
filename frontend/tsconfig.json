{
  "compilerOptions": {
    // 타입스크립트 컴파일러의 옵션들을 지정하는 속성
    /* Projects */
    // 컴파일한 결과를 캐싱하고, 변경된 파일만 다시 컴파일
    "incremental": true,
    // TypeScript 컴파일러가 생성하는 빌드 정보 파일의 경로를 지정
    "tsBuildInfoFile": "./build/.tsbuildinfo",
    /* Language and Environment */
    // 사용할 ECMAScript 버전 설정
    "target": "ES6",
    // 프로젝트에서 사용할 수 있는 ECMAScript 라이브러리를 명시적으로 설정
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    // JSX 코드 생성 설정
    "jsx": "react-jsx",
    /* Modules */
    // 모듈을 위한 코드 생성 설정
    "module": "commonjs",
    // 모듈을 해석하는 방식을 지정
    "moduleResolution": "node",
    // import 구문의 모듈 해석 시에 기준이 되는 경로 지정
    "baseUrl": ".",
    // 'baseUrl'을 기준으로 상대 위치로 가져오기를 다시 매핑하는 항목 설정
    "paths": {
      "@components/*": ["src/components/*"],
      "@apis/*": ["src/apis/*"],
      "@pages/*": ["src/pages/*"],
      "@constants/*": ["src/constants/*"],
      "@hooks/*": ["src/hooks/*"],
      "@utils/*": ["src/utils/*"],
      "@public/*": ["public/*"],
      "@config": ["config.ts"]
    },
    // 컴파일 목록에 자동으로 포함시킬 패키지들의 경로
    // "typeRoots": [],
    // typeRoots 프로퍼티에 지정된 경로에서 컴파일 목록에 포함시킬 특정 패키지
    "types": [],
    /* Emit */
    // 컴파일 시 타입스크립트 소스의 주석을 모두 제거
    "removeComments": true,
    // 컴파일 된 파일 디렉토리에 .js.map 파일이 만들어진다. 디버깅에 유용하다
    "sourceMap": true,
    /* Interop Constraints */
    // 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공
    "esModuleInterop": true,
    // 대소문자 판별
    "forceConsistentCasingInFileNames": true,
    /* Type Checking */
    // 모든 타입스크립트 타입 체킹 활성화
    "strict": true,
    /* Completeness */
    // 선언 파일 타입 체크 생략
    "skipLibCheck": true
  },
  "exclude": ["**/*test.ts", "**/*test.tsx"],
  "include": ["./src"]
}
